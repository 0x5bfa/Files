// Copyright (c) Files Community
// Licensed under the MIT License.

using System.CodeDom.Compiler;
using System.IO;

namespace Files.Core.SourceGenerator.Generators
{
	[Generator(LanguageNames.CSharp)]
	internal sealed class ComVirtualMethodGenerator : IIncrementalGenerator
	{
		/// <inheritdoc/>
		public void Initialize(IncrementalGeneratorInitializationContext context)
		{
			IncrementalValueProvider<ImmutableArray<ComVirtualMethodInfo>> provider =
				context.SyntaxProvider.ForAttributeWithMetadataName(
					"Files.Shared.Attributes.GeneratedVirtualMethodAttribute",
					(syntaxNode, _) => syntaxNode is MethodDeclarationSyntax,
					(syntaxContext, cancellationToken) =>
					{
						cancellationToken.ThrowIfCancellationRequested();

						return new ComVirtualMethodInfo(string.Empty, []);
					})
				.Collect();

			context.RegisterSourceOutput(provider, (context, item) =>
			{
				using StringWriter sw = new();
				using IndentedTextWriter writer = new(sw);

				writer.WriteLine("// <auto-generated/>");
				writer.WriteLine("#pragma warning disable");
				writer.WriteLine("");

				writer.WriteLine("namespace Windows.Win32.System.WinRT");
				writer.WriteLine("{");
				writer.Indent++;
				writer.WriteLine("/// <inheritdoc cref=\"IStorageProviderStatusUI\"/>");
				writer.WriteLine("unsafe partial struct IStorageProviderStatusUI");
				writer.WriteLine("{");
				writer.Indent++;

				writer.WriteLine("/// <inheritdoc/>");
				writer.WriteLine("[global::System.CodeDom.Compiler.GeneratedCode(\"ComVirtualMethodGenerator\", \"1.0.0.0\")]");
				writer.WriteLine("[global::System.Diagnostics.DebuggerNonUserCode]");
				writer.WriteLine("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
				writer.WriteLine("[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]");
				writer.WriteLine("public partial global::Windows.Win32.Foundation.HRESULT GetQuotaTotalInBytes(ulong* value)");
				writer.WriteLine("{");
				writer.Indent++;
				writer.WriteLine("return (global::Windows.Win32.Foundation.HRESULT)0;");
				//writer.WriteLine("return (global::Windows.Win32.Foundation.HRESULT)((delegate* unmanaged[global::System.Runtime.CompilerServices.CallConvMemberFunction]<IStorageProviderQuotaUI*, ulong*, int>)lpVtbl[6])" +
				//	"((IStorageProviderQuotaUI*)global::System.Runtime.CompilerServices.Unsafe.AsPointer(ref this), value);");
				writer.Indent--;
				writer.WriteLine("}");

				writer.WriteLine("");

				writer.WriteLine("/// <inheritdoc/>");
				writer.WriteLine("[global::System.CodeDom.Compiler.GeneratedCode(\"ComVirtualMethodGenerator\", \"1.0.0.0\")]");
				writer.WriteLine("[global::System.Diagnostics.DebuggerNonUserCode]");
				writer.WriteLine("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
				writer.WriteLine("[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]");
				writer.WriteLine("public partial global::Windows.Win32.Foundation.HRESULT GetQuotaUsedInBytes(ulong* value)");
				writer.WriteLine("{");
				writer.Indent++;
				writer.WriteLine("return (global::Windows.Win32.Foundation.HRESULT)0;");
				//writer.WriteLine("return (global::Windows.Win32.Foundation.HRESULT)((delegate* unmanaged[global::System.Runtime.CompilerServices.CallConvMemberFunction]<IStorageProviderQuotaUI*, ulong*, int>)lpVtbl[8])" +
				//	"((IStorageProviderQuotaUI*)global::System.Runtime.CompilerServices.Unsafe.AsPointer(ref this), value);");
				writer.Indent--;
				writer.WriteLine("}");

				writer.Indent--;
				writer.WriteLine("}");
				writer.Indent--;
				writer.WriteLine("}");

				// Emit
				context.AddSource("File.g.cs", sw.ToString());
			});
		}
	}
}
